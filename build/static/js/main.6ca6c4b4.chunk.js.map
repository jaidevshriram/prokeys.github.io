{"version":3,"sources":["Navbar.js","Hero.js","GettingStarted.js","App.js","serviceWorker.js","index.js","img/mockup.png"],"names":["Navbar","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","React","Component","Hero","src","mockup","GettingStarted","Fragment","App","component","window","location","pathname","Hero_Hero","GettingStarted_GettingStarted","Navbar_Navbar","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oMAEqBA,mLAEnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sEACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCAAgCC,KAAK,KAAlD,WACAJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpLV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAGlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BQ,GAAG,0BAC3CX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,QAAsCJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,eAExCH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,qBAA7B,eAEFJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,mBAlBsBQ,IAAMC,2BCCrBC,mLAEnB,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAf,gMACCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,6BACAH,EAAAC,EAAAC,cAAA,2GAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,OAAKa,IAAKC,IAAQb,UAAU,8BAbDS,IAAMC,WCDnBI,mLAEnB,OACCjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,KACElB,EAAAC,EAAAC,cAAA,sCAJuCU,IAAMC,WCG7BM,mLAIjB,IAAIC,EAUJ,MAR+B,KAA5BC,OAAOC,SAASC,UAA+C,UAA5BF,OAAOC,SAASC,SACpDH,EAAYpB,EAAAC,EAAAC,cAACsB,EAAD,MAEwB,qBAA7BH,OAAOC,SAASC,WACvBH,EAAYpB,EAAAC,EAAAC,cAACuB,EAAD,OAKZzB,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,KACElB,EAAAC,EAAAC,cAACwB,EAAD,MACCN,UAjBwBR,IAAMC,WCOnBc,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,iECVNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.6ca6c4b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Navbar extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t    <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-bottom h-md-10\">\r\n\t\t      <a className=\"navbar-brand font-weight-bold\" href=\"#\">ProKeys</a>\r\n\t\t      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t        <span className=\"navbar-toggler-icon\"></span>\r\n\t\t      </button>\r\n\r\n\t\t      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\t\t        <ul className=\"navbar-nav mr-auto\">\r\n\t\t          <li className=\"nav-item\">\r\n\t\t            <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n\t\t          </li>\r\n\t\t          <li className=\"nav-item\">\r\n\t\t            <a className=\"nav-link\" href=\"./getting-started\">How to Use</a>\r\n\t\t          </li>\r\n\t\t          <li className=\"nav-item\">\r\n\t\t            <a className=\"nav-link\" href=\"#\">Help</a>\r\n\t\t          </li>\r\n\t\t        </ul>\r\n\t\t      </div>\r\n\t\t    </nav>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\r\nimport mockup from './img/mockup.png';\r\n\r\nexport default class Hero extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container-fluid h-md-95 bg-navy\">                                                                                                                                                                                 95 bg-navy\">\r\n\t\t\t\t<div className=\"row h-100\">\r\n\t\t\t\t\t<div className=\"col-12 col-md-6 align-self-center\">\r\n\t\t\t\t\t\t<div className=\"my-auto h-100 text-center text-white px-5\">\r\n\t\t\t\t\t\t\t<h1 className=\"font-weight-bold\" >The Best Tool for Typists</h1>\r\n\t\t\t\t\t\t\t<h3>ProKeys is a text expander that helps you focus on your content, not on the actual content.</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-12 col-md-6 align-self-center\">\r\n\t\t\t\t\t\t<div className=\"mx-auto\">\r\n\t\t\t\t\t\t\t<img src={mockup} className=\"img-fluid w-75\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class GettingStarted extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t\t<h1> GettingStarted </h1>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\nimport Navbar from './Navbar';\nimport Hero from './Hero';\nimport GettingStarted from './GettingStarted';\n \nexport default class App extends React.Component {\n\n  render() {\n\n    var component;\n\n    if(window.location.pathname == '/' || window.location.pathname == '/index' ) {\n      component = <Hero/>;\n    }\n    else if (window.location.pathname === '/getting-started') {\n      component = <GettingStarted />;\n    }\n\n\n    return (\n      <React.Fragment>\n        <Navbar />\n        {component}\n      </React.Fragment>\n    );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mockup.32e026bf.png\";"],"sourceRoot":""}